#+title: PJ's GNU Emacs Config
#+author: Philip Johansson
#+description: PJ's personal Emacs config.
#+startup: showeverything
#+options: toc:2
* TABLE OF CONTENTS                                                     :toc:
- [[#important-initial-packages][Important initial packages]]
  - [[#use-package-package-manager][use-package package manager]]
  - [[#evil-mode][Evil mode]]
- [[#keybindings][Keybindings]]
  - [[#escapekeyboard-escape-quit][escape=keyboard-escape-quit]]
  - [[#general][general]]
  - [[#move-text][move-text]]
  - [[#keep-selection-on-indent][Keep selection on indent]]
  - [[#c-u][C-u]]
- [[#miscellaneous][Miscellaneous]]
- [[#fonts][Fonts]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#ui-tweaks][UI Tweaks]]
- [[#org-mode][Org mode]]
  - [[#enable-table-of-contents][Enable Table of Contents]]
  - [[#enable-org-bullets][Enable Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#sudo-edit][sudo-edit]]
- [[#rainbow-mode][rainbow mode]]
- [[#which-key][which-key]]
- [[#shells][Shells]]
  - [[#vterm][Vterm]]
- [[#theme][Theme]]
- [[#whitespace][Whitespace]]
- [[#git][git]]
  - [[#magit][magit]]
- [[#emacs-completion][emacs completion]]
- [[#multiple-cursors][multiple-cursors]]
- [[#code-completion][Code completion]]
  - [[#company][company]]
- [[#auto-save][Auto save]]
- [[#tabs-vs-space][Tabs vs Space]]
- [[#comment][Comment]]

* Important initial packages
These are packages that are essential
** use-package package manager

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
    '(("melpa" . "https://melpa.org/packages/")
      ("gnu" . "https://elpa.gnu.org/packages/")
      ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  (require 'use-package)
  (use-package diminish :ensure t)
#+end_src
** Evil mode
Very important, 'vim .gt. emacs'

#+begin_src emacs-lisp
    (defvar evil-want-keybinding nil)
    (defvar evil-want-C-u-scroll t)
    (defvar evil-want-integration t)

    (use-package evil
      :init
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      :config
      (evil-set-undo-system 'undo-redo)
      (evil-mode))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))
#+end_src
* Keybindings
** escape=keyboard-escape-quit
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** general
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    (general-create-definer pj/leader-keys
      :states '(normal insert visual emacs)

      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")
    (pj/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-current-buffer :wk "Kill buffer")
      "bn" '(next-buffer :wk "Buffer next")
      "bp" '(previous-buffer :wk "Buffer previous")
      "br" '(revert-buffer :wk "Buffer reload"))

    (pj/leader-keys
      "c" '(:ignore t :wk "compile")
      "cc" '(compile :wk "Start compilation")
      "cn" '(next-error :wk "Next compilation error")
      "cp" '(previous-error :wk "Previous compilation error"))

    (pj/leader-keys
      "d" '(:ignore t :wk "dired")
      "dd" '(dired :wk "Open dired"))

    (pj/leader-keys
      "g" '(:ignore: t :wk "magit")
      "gg" '(magit :wk "Open magit"))

    (pj/leader-keys
      "f" '(:ignore t :wk "file")
      "ff" '(find-file :wk "Find file")
      "fc" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Open config.org")
      "fn" '(dired-create-empty-file :wk "New file"))

    (pj/leader-keys
      "e" '(:ignore t :wk "evaluate")
      "eb" '(eval-buffer :wk "Evaluate buffer")
      "ed" '(eval-defun :wk "Evaluate defun")
      "ee" '(eval-expression :wk "Evaluate expression")
      "er" '(eval-region :wk "Evaluate region"))

    (pj/leader-keys
      "h" '(:ignore t :wk "help")
      "hf" '(describe-function :wk "Help function")
      "hv" '(describe-variable :wk "Help variable"))

    (pj/leader-keys
      "v" '(:ignore t :wk "vterm")
      "vv" '(multi-vterm :wk "Open vterm")
      "vn" '(multi-vterm-next :wk "Next vterm")
      "vp" '(multi-vterm-prev :wk "Previous vterm"))

    (pj/leader-keys
      "s" '(:ignore t :wk "split")
      "ss" '(split-window-right :wk "Split window vertically"))

    (pj/leader-keys
      "q"  '(evil-window-delete :wk "Quit window")
      "w"  '(save-buffer :wk "Save buffer")
      "/"  '(evil-commentary-line :wk "Comment line/region"))

    (pj/leader-keys
      "m" '(:ignore t :wk "multiple-cursors")
      "mm" '(mc/edit-lines :wk "Mark at selection")
      "mn" '(mc/mark-next-like-this :wk "Mark next like this")
      "mp" '(mc/mark-previous-like-this :wk "Mark prev like this")
      "ma" '(mc/mark-all-like-this :wk "Mark all like this"))
  )
#+end_src
** move-text
Move lines up and down with <C-j> and <C-k>

#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :config
    (evil-define-key 'normal 'global (kbd "C-j") #'move-text-line-down)
    (evil-define-key 'normal 'global (kbd "C-k") #'move-text-line-up))
#+end_src
** Keep selection on indent
If text is selected when '<' or '>', keep the selection

#+begin_src emacs-lisp
  (define-key evil-visual-state-map (kbd "<") (lambda ()
                                                (interactive)
                                                (call-interactively 'evil-shift-left)
                                                (evil-normal-state)
                                                (evil-visual-restore)))
  (define-key evil-visual-state-map (kbd ">") (lambda ()
                                                (interactive)
                                                (call-interactively 'evil-shift-right)
                                                (evil-normal-state)
                                                (evil-visual-restore)))
#+end_src
** C-u
For some reason evil can't handle this one

#+begin_src emacs-lisp
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
#+end_src
* Miscellaneous
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "M-s") 'shell-command)
#+end_src
* Fonts
What fonts to use, very important

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "FiraCode Nerd Font"
    :height 180)

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src
** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.
You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
* UI Tweaks
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)      ;; no splash screen
  (menu-bar-mode 0)                    ;; ew menu bar
  (tool-bar-mode 0)                    ;; ew tool bar
  (scroll-bar-mode 0)                  ;; ew scroll bar
  (column-number-mode 1)               ;; so we can see the column
  (global-display-line-numbers-mode 1) ;; line numbers are useful
  (show-paren-mode 1)                  ;; on by default but still
  (setq show-trailing-whitespace t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (display-time)
  (global-hl-line-mode 1)
#+end_src
* Org mode
** Enable Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Enable Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda ()
                      (org-bullets-mode 1)
                      (diminish 'org-indent-mode)))
#+end_src
** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior.
I think this has to do with electric-indent-mode, which is turned on by default in Emacs. So let's turn it OFF!

#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

#+begin_src emacs-lisp
  (defun my/org-reformat-buffer ()
    "Reformat an org-mode buffer."
    (interactive)
    (when (y-or-n-p "Format current buffer? ")
      (let ((document (org-element-interpret-data (org-element-parse-buffer))))
        (erase-buffer)
        (insert document)))
    (message nil))
#+end_src
* sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
      (pj/leader-keys
        "fu" '(sudo-edit-find-file :wk "Sudo find file")
        "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src
* rainbow mode
Display the actual color as a background for any hex color value (ex. #abcdef).
The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src
* which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :init
    (setq which-key-idle-delay 0.2)
    :config
    (setq  which-key-side-window-location 'bottom
  	  which-key-sort-order #'which-key-key-order-alpha
  	  which-key-add-column-padding 1
  	  which-key-sort-uppercase-first nil
  	  which-key-max-display-columns nil
  	  which-key-min-display-lines 10
  	  which-key-side-window-slot +10
  	  which-key-side-window-max-height 0.40
  	  which-key-max-description-length 25
  	  which-key-allow-imprecise-window-fit t)
      (which-key-mode 1))
#+end_src
* Shells
** Vterm
Vterm is a terminal emulator within Emacs. 
The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.
By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq shell-file-name "/bin/fish"
          vterm-max-scrollback 5000))
  (use-package multi-vterm
    :ensure t)
#+end_src
* Theme
Less is more

#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :ensure t)
  (custom-set-faces
    '(org-block ((t (:background "#181818" :foreground "#e4e4ef")))))
#+end_src
* Whitespace
So we can see that damn whitespace

#+begin_src emacs-lisp
  (use-package whitespace
    :ensure t
    :diminish
    :hook ((org-mode prog-mode) . whitespace-mode)
    :config
    (setq whitespace-style '(face spaces space-mark tab-mark tabs))
    (setq whitespace-space-regexp "\\(\x20\\)"))
#+end_src
* git
** magit
Duh

#+begin_src emacs-lisp
  (use-package magit
  :ensure t
  :diminish)
  (diminish 'auto-revert-mode)
#+end_src

#+begin_src emacs-lisp
    (use-package diff-hl
  :ensure t
  :diminish
:config 
(global-diff-hl-mode))
#+end_src

* emacs completion
#+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :config (vertico-mode))
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil))

      (use-package marginalia
        :ensure t
        :config
        (marginalia-mode))
#+end_src
* multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)
#+end_src
* Code completion
** company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :diminish)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src
* Auto save
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.cache/emacs")))
#+end_src
* Tabs vs Space
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (use-package dtrt-indent
    :ensure t
    :config
    (setq dtrt-indent-global-mode 1))
#+end_src
* Comment
#+begin_src emacs-lisp
  (use-package evil-commentary
    :diminish
  :ensure t
  :config
  (evil-commentary-mode))
#+end_src
#+end_src
